// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CursoEnum {
  CIENCIA_COMPUTACAO
  DESIGN_DIGITAL
  ENGENHARIA_COMPUTACAO
  ENGENHARIA_SOFTWARE
  REDES_COMPUTADORES
  SISTEMAS_INFORMACAO
}

enum StatusDisciplina {
  CONCLUIDA
  EM_ANDAMENTO
  PENDENTE
  REPROVADA
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  curso         CursoEnum
  // semestre      Int?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  completedOnboarding Boolean @default(false)

  passwordResetTokens PasswordResetToken[]
  disciplinasProgresso UserDisciplinaProgresso[]

  @@map("users")
}

model Curso {
  id          String       @id @default(cuid())
  nome        String
  codigo      String       @unique
  disciplinas Disciplina[]
  curriculos  Curriculo[]
}

model Curriculo {
  id          String       @id @default(cuid())
  nome        String
  ano         Int
  cursoId     String
  curso       Curso        @relation(fields: [cursoId], references: [id])
  disciplinas Disciplina[]
  optativas   Disciplina[] @relation("OptativasCurriculo")
}

model Disciplina {
  id            String      @id @default(cuid())
  nome          String
  codigo        String
  cargaHoraria  Int
  semestre      Int
  obrigatoria   Boolean
  cursoId       String
  curso         Curso       @relation(fields: [cursoId], references: [id])
  preRequisitos String
  curriculoId   String?
  curriculo     Curriculo?  @relation(fields: [curriculoId], references: [id])
  optativaDe    Curriculo[] @relation("OptativasCurriculo")
  usuariosProgresso UserDisciplinaProgresso[]
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model UserDisciplinaProgresso {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  disciplina  Disciplina @relation(fields: [disciplinaId], references: [id])
  disciplinaId String
  semestre    Int
  status      StatusDisciplina @default(PENDENTE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, disciplinaId])
}
